@using ClickNClaim.WebPortal.Resources
@model ClickNClaim.Common.Event

<div class="card hoverable">
    <div class="card-content recorder-content">
        <i class="fa fa-microphone fa-3x" onclick="toggleRecording(this)"></i>
    </div>
</div>
<ul id="recordingslist"></ul>

<script src="@Url.Content("~/Scripts/recorder.js")" type="text/javascript"></script>
<script type="text/javascript">

    var audio_context;
    var recorder;
    var recording = false;

    var conflictId = @Model.IdConflict;
    var eventId = @Model.Id;


    function startUserMedia(stream) {
        var input = audio_context.createMediaStreamSource(stream);

        // Uncomment if you want the audio to feedback directly
        //input.connect(audio_context.destination);
        //__log('Input connected to audio context destination.');

        recorder = new Recorder(input);
    }

    function toggleRecording(button) {
        if (!recording) {
            startRecording(button);
        }
        else {
            stopRecording(button);
        }
        recording = !recording;
    }

    function createDownloadLink() {
        recorder && recorder.exportWAV(function(blob) {
            var url = URL.createObjectURL(blob);
            var li = document.createElement('li');
            var au = document.createElement('audio');
            var hf = document.createElement('a');
      
            au.controls = true;
            au.src = url;
            hf.href = url;
            hf.download = new Date().toISOString() + '.wav';
            hf.innerHTML = hf.download;
            li.appendChild(au);
            li.appendChild(hf);
            recordingslist.appendChild(li);
        });
    }

    function startRecording(button) {
        recorder && recorder.record();
      //  button.disabled = true;
        //button.nextElementSibling.disabled = false;
     //   __log('Recording...');
    }

    function stopRecording(button) {
        recorder && recorder.stop();
     //   button.disabled = true;
       // button.previousElementSibling.disabled = false;
      //  __log('Stopped recording.');

        // create WAV download link using audio data blob
        createDownloadLink();

      



        recorder.clear();
    }

    $(document).ready(function () {
        try {
            // webkit shim
            window.AudioContext = window.AudioContext || window.webkitAudioContext;
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
            window.URL = window.URL || window.webkitURL;

            audio_context = new AudioContext;
            if (!navigator.getUserMedia) {
                var i = $("div.recorder-content i");
                i.removeClass("fa-microphone");
                i.addClass("fa fa-microphone-slash");
            }

            navigator.getUserMedia({ audio: true }, startUserMedia, function (e) {
            });

        } catch (e) {
            var i = $("div.recorder-content i");
            i.removeClass("fa-microphone");
            i.addClass("fa fa-microphone-slash");
        }
    })




</script>
